server {
    listen 80;
    server_name deftection.com;  # Replace with your real domain or keep as localhost during dev

    # Upload size & timeouts
    client_max_body_size 50M;
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 300s;

    # Basic security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Flask AI Service â€“ Access via /ai/*
    location /ai {
        # Strip /ai from the request path so Flask sees /analyze, not /ai/analyze
        rewrite ^/ai(/.*)$ $1 break;
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS headers for browser â†’ API access
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
        
        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header Content-Length 0;
            add_header Content-Type 'text/plain; charset=UTF-8';
            return 204;
        }
    }

    #  Laravel Application â€“ everything else
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    #  Block direct access to sensitive dotfiles
    location ~ /\.(?!well-known).* {
        deny all;
    }
    location ~ /\.env {
        deny all;
    }

    # ðŸŽ¨ Laravel-powered error pages (Vue styled)
    error_page 404 /404;
    error_page 500 502 503 504 /500;
    
    # Let Laravel handle them as custom routes
    # location = /404 {
    #     proxy_pass http://127.0.0.1:8000;
    # }
    # location = /500 {
    #     proxy_pass http://127.0.0.1:8000;
    # }
}

# ===============================================
# PRODUCTION CONFIGURATION (HTTPS/SSL)
# ===============================================
# Uncomment and configure the sections below for production deployment

# # SSL/HTTPS Configuration
# server {
#     listen 443 ssl http2;
#     server_name deftection.com www.deftection.com;  # Replace with your actual domain
#     
#     # SSL Certificate Configuration
#     ssl_certificate /etc/ssl/certs/deftection.com.crt;        # Path to your SSL certificate
#     ssl_certificate_key /etc/ssl/private/deftection.com.key;  # Path to your private key
#     
#     # Modern SSL Configuration (A+ Rating)
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
#     ssl_prefer_server_ciphers off;
#     
#     # SSL Performance Optimization
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:SSL:50m;
#     ssl_session_tickets off;
#     
#     # OCSP Stapling (improves SSL handshake performance)
#     ssl_stapling on;
#     ssl_stapling_verify on;
#     ssl_trusted_certificate /etc/ssl/certs/ca-bundle.crt;  # CA bundle for OCSP stapling
#     resolver 8.8.8.8 8.8.4.4 valid=300s;
#     resolver_timeout 5s;
#     
#     # Upload size & timeouts (same as HTTP)
#     client_max_body_size 50M;
#     proxy_connect_timeout 60s;
#     proxy_send_timeout 60s;
#     proxy_read_timeout 300s;
#     
#     # Enhanced Security Headers for Production
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
#     add_header X-Frame-Options "SAMEORIGIN" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
#     add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: https:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; font-src 'self' data:;" always;
#     add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
#     
#     # Rate Limiting (prevents abuse)
#     limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
#     limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=2r/s;
#     
#     #  Flask AI Service â€“ Access via /ai/* (with rate limiting)
#     location /ai {
#         # Apply rate limiting to AI endpoints
#         limit_req zone=api_limit burst=20 nodelay;
#         limit_req zone=upload_limit burst=5 nodelay;
#         
#         # Strip /ai from the request path
#         rewrite ^/ai(/.*)$ $1 break;
#         proxy_pass http://127.0.0.1:5000;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header X-Forwarded-Port $server_port;
#         
#         # CORS headers (more restrictive in production)
#         add_header Access-Control-Allow-Origin "https://deftection.com" always;  # Replace with your domain
#         add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
#         add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization" always;
#         add_header Access-Control-Allow-Credentials "true" always;
#         
#         # Handle preflight OPTIONS requests
#         if ($request_method = 'OPTIONS') {
#             add_header Access-Control-Allow-Origin "https://deftection.com";
#             add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
#             add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";
#             add_header Access-Control-Max-Age 3600;
#             add_header Content-Length 0;
#             add_header Content-Type 'text/plain; charset=UTF-8';
#             return 204;
#         }
#     }
#     
#     #  Laravel Application â€“ everything else (with rate limiting)
#     location / {
#         limit_req zone=api_limit burst=50 nodelay;
#         
#         proxy_pass http://127.0.0.1:8000;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header X-Forwarded-Port $server_port;
#     }
#     
#     # Static file caching (improve performance)
#     location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
#         proxy_pass http://127.0.0.1:8000;
#         expires 1y;
#         add_header Cache-Control "public, immutable";
#         add_header Vary "Accept-Encoding";
#         
#         # Enable gzip compression for static files
#         gzip on;
#         gzip_types text/css application/javascript image/svg+xml;
#     }
#     
#     #  Enhanced security - Block sensitive files and directories
#     location ~ /\.(?!well-known).* {
#         deny all;
#         access_log off;
#         log_not_found off;
#     }
#     
#     location ~ /\.env {
#         deny all;
#         access_log off;
#         log_not_found off;
#     }
#     
#     # Block access to common attack vectors
#     location ~* \.(sql|log|tar|gz|bak|old|tmp)$ {
#         deny all;
#         access_log off;
#         log_not_found off;
#     }
#     
#     #  Laravel-powered error pages
#     error_page 404 /404;
#     error_page 500 502 503 504 /500;
#     
#     location = /404 {
#         proxy_pass http://127.0.0.1:8000;
#     }
#     location = /500 {
#         proxy_pass http://127.0.0.1:8000;
#     }
#     
#     # Security monitoring - log suspicious activities
#     access_log /var/log/nginx/deftection_access.log combined;
#     error_log /var/log/nginx/deftection_error.log warn;
# }
# 
# # Redirect HTTP to HTTPS (Production Security)
# server {
#     listen 80;
#     server_name deftection.com www.deftection.com;  # Replace with your actual domain
#     
#     # Redirect all HTTP traffic to HTTPS
#     return 301 https://$server_name$request_uri;
# }
# 
# # Redirect www to non-www (or vice versa - choose one)
# server {
#     listen 443 ssl http2;
#     server_name www.deftection.com;  # Replace with your actual domain
#     
#     ssl_certificate /etc/ssl/certs/deftection.com.crt;
#     ssl_certificate_key /etc/ssl/private/deftection.com.key;
#     
#     return 301 https://deftection.com$request_uri;
# }

# ===============================================
# PRODUCTION SETUP INSTRUCTIONS
# ===============================================
#
# To enable HTTPS/SSL in production:
#
# 1. OBTAIN SSL CERTIFICATE:
#    - Use Let's Encrypt (free): certbot --nginx -d deftection.com -d www.deftection.com
#    - Or purchase from a CA (GoDaddy, Namecheap, etc.)
#    - Or use Cloudflare for SSL termination
#
# 2. UPDATE PATHS:
#    - Replace /etc/ssl/certs/deftection.com.crt with your certificate path
#    - Replace /etc/ssl/private/deftection.com.key with your private key path
#    - Replace deftection.com with your actual domain name
#
# 3. ENABLE CONFIGURATION:
#    - Uncomment the production server blocks above
#    - Comment out or remove the development server block
#    - Test configuration: nginx -t
#    - Reload nginx: systemctl reload nginx
#
# 4. ADDITIONAL SECURITY:
#    - Enable fail2ban for DDoS protection
#    - Set up monitoring (e.g., Prometheus + Grafana)
#    - Configure log rotation for nginx logs
#    - Implement backup strategies for SSL certificates
#    - Consider using a Web Application Firewall (WAF)
#
# 5. PERFORMANCE OPTIMIZATION:
#    - Enable HTTP/2 (already configured above)
#    - Configure gzip compression (already included)
#    - Set up proper caching headers (already included)
#    - Consider using a CDN (CloudFlare, AWS CloudFront)
#
# 6. MONITORING:
#    - Monitor SSL certificate expiration
#    - Set up uptime monitoring
#    - Monitor error logs for security threats
#    - Track performance metrics